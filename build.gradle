plugins {
    id 'org.spongepowered.gradle.vanilla' version '0.2.+' apply false
    id 'net.darkhax.curseforgegradle' version '1.+' apply false
    id 'com.modrinth.minotaur' version '2.+' apply false
    id 'io.freefair.lombok' version '8.+' apply false
    id 'net.neoforged.gradleutils' version '3.+'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

gradleutils.version {
    tags {
        if (mod_version_label != 'release')
            label = mod_version_label

        appendCommitOffset = false
    }
}

println "$mod_name, Version: ${gradleutils.version.toString()}"
println "Minecraft: $minecraft_version, Mappings: $mappings_channel-$mappings_version"

subprojects {
    apply plugin: 'java'

    if (name != 'Common') {
        apply plugin: 'net.darkhax.curseforgegradle'
        apply plugin: 'com.modrinth.minotaur'

        evaluationDependsOn(':Common')
    }

    apply plugin: 'io.freefair.lombok'

    apply plugin: 'idea'
    apply plugin: 'maven-publish'

    java {
        toolchain.languageVersion = JavaLanguageVersion.of(java_version)

        withSourcesJar()

        sourceCompatibility = JavaVersion."VERSION_$java_version"
        targetCompatibility = JavaVersion."VERSION_$java_version"
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }


    version = gradleutils.version.toString()
    group = project.group

    tasks.withType(JavaCompile).configureEach {
        source project(':Common').sourceSets.main.allSource

        options.encoding = 'UTF-8'
    }

    tasks.withType(ProcessResources).configureEach {
        from project(':Common').sourceSets.main.resources

        var replaceProperties = [
                'mod_version'                  : mod_version,
                "minecraft_version"            : minecraft_version,
                "forge_version"                : forge_version,
                "forge_loader_version_range"   : forge_loader_version_range,
                "forge_version_range"          : forge_version_range,
                "minecraft_version_range"      : minecraft_version_range,
                "fabric_version"               : fabric_version,
                "fabric_loader_version"        : fabric_loader_version,
                "mod_name"                     : mod_name,
                "mod_author"                   : mod_author,
                "mod_id"                       : mod_id,
                "license"                      : license,
                "description"                  : project.description,
                "neoforge_version"             : neoforge_version,
                "neoforge_loader_version_range": neoforge_loader_version_range,
                "credits"                      : credits
        ]

        inputs.properties replaceProperties

        filesMatching(['META-INF/*mods.toml', 'fabric.mod.json', 'pack.mcmeta']) {
            expand replaceProperties
        }
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes([
                    'Specification-Title'   : mod_id,
                    'Specification-Vendor'  : mod_author,
                    'Specification-Version' : '1',
                    'Implementation-Title'  : rootProject.name,
                    'Implementation-Version': jar.archiveVersion,
                    'Implementation-Vendor' : mod_author
            ])
        }
    }
}

tasks.register('publishMod') {
    dependsOn(':Forge:publishCurseForge').finalizedBy(':Fabric:publishCurseForge')
    dependsOn(':Forge:modrinth').finalizedBy(':Fabric:modrinth')
}