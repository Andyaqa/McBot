import net.darkhax.curseforgegradle.Constants as CFConstants
import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '6.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'com.github.johnrengelman.shadow'
}

base {
    archivesName = "$mod_name-forge-$minecraft_version"
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"

    config "${mod_id}.mixins.json"
    config "${mod_id}.forge.mixins.json"
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

println "Forge: $forge_version"

minecraft {
    mappings channel: mappings_channel, version: "$mappings_version-$minecraft_version"

    copyIdeResources = true

    if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }

    runs {
        configureEach {
            workingDirectory project(':Common').file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', mod_id

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "$buildDir/createSrgToMcp/output.srg"

            ideaModule "${rootProject.name}.${project.name}.main"

            mods {
                "${mod_id}" {
                    source sourceSets.main
                    source project(':Common').sourceSets.main
                }
            }
        }

        client
    }
}

sourceSets.each {
    var dir = layout.buildDirectory.dir("sourcesSets/$it.name")

    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}

repositories {
    mavenCentral() {
        content {
            includeGroup 'org.projectlombok'
        }
    }
    maven { url 'https://maven.nova-committee.cn/releases' }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraft_version-$forge_version"

    compileOnly project(':Common')

    library ("cn.evole.onebot:OneBot-Client:$onebot_client_version"){transitive = false}
    library ("org.spongepowered:configurate-yaml:$yaml_version")
    library ("com.github.houbb:csv:0.2.0")
    jarJar("cn.evole.onebot:OneBot-Client:[$onebot_client_version,)"){transitive = false}
    jarJar("org.spongepowered:configurate-yaml:[$yaml_version,)")
    jarJar("com.github.houbb:csv:[0.2.0,)")

    implementation ("org.yaml:snakeyaml:1.28")

    compileOnly "org.projectlombok:lombok:$lombok_version"
    annotationProcessor "org.projectlombok:lombok:$lombok_version"
}

afterEvaluate {
    tasks.configureReobfTaskForReobfJar.mustRunAfter(tasks.compileJava)
    tasks.configureReobfTaskForReobfJarJar.mustRunAfter(tasks.compileJava)
}

jar {
    archiveClassifier = 'slim'

    manifest {
        attributes([
                'MixinConfigs': "${mod_id}.mixins.json,${mod_id}.forge.mixins.json"
        ])
    }

    finalizedBy('reobfJar')
}

tasks.jarJar {
    archiveClassifier = ''

    finalizedBy('reobfJarJar')
}

sourcesJar {
    from project(':Common').sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

tasks.register('publishCurseForge', TaskPublishCurseForge) {
    dependsOn(tasks.jarJar)
    apiToken = System.getenv('CURSEFORGE_TOKEN')

    var modFile = upload('534155', tasks.jarJar.archiveFile)
    modFile.displayName = "${base.archivesName.get()}-$version"
    modFile.releaseType = CFConstants.RELEASE_TYPE_BETA
    modFile.addGameVersion(minecraft_version, 'client')
    modFile.addModLoader('Forge')
    modFile.addJavaVersion "Java $java_version"

    modFile.changelogType = CFConstants.CHANGELOG_HTML
    modFile.    changelog = provider { file("${rootDir}/CHANGELOG.md") }
}

modrinth {
    token = System.getenv('MODRINTH_TOKEN')

    projectId = 'McBot'

    versionName = "${base.archivesName.get()}-$version"
    versionNumber = version
    versionType = 'beta'

    gameVersions = [ minecraft_version ]
    loaders = [ 'forge' ]

    changelog = provider { file("${rootDir}/CHANGELOG.md") }

    uploadFile = tasks.jarJar
    additionalFiles = [ tasks.sourcesJar ]
}

tasks.modrinth.dependsOn(tasks.jarJar)
tasks.modrinth.dependsOn(tasks.sourcesJar)

tasks.modrinth.dependsOn(':Changelog:makeMarkdownChangelog')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact sourcesJar

            jarJar.component(it)

            artifactId archivesBaseName
        }
    }

    repositories {
        mavenLocal()
    }
}